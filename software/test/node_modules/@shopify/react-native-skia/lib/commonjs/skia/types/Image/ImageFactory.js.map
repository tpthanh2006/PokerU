{"version":3,"names":["AlphaType","exports"],"sources":["ImageFactory.ts"],"sourcesContent":["import type { SkData } from \"../Data\";\nimport type { NativeBuffer } from \"../NativeBuffer\";\n\nimport type { ColorType } from \"./ColorType\";\nimport type { SkImage } from \"./Image\";\n\nexport enum AlphaType {\n  Unknown,\n  Opaque,\n  Premul,\n  Unpremul,\n}\n\nexport interface ImageInfo {\n  alphaType: AlphaType;\n  // TODO: add support for color space\n  // colorSpace: ColorSpace;\n  colorType: ColorType;\n  height: number;\n  width: number;\n}\n\nexport interface ImageFactory {\n  /**\n   * Return an Image backed by the encoded data, but attempt to defer decoding until the image\n   * is actually used/drawn. This deferral allows the system to cache the result, either on the\n   * CPU or on the GPU, depending on where the image is drawn.\n   * This decoding uses the codecs that have been compiled into CanvasKit. If the bytes are\n   * invalid (or an unrecognized codec), null will be returned. See Image.h for more details.\n   * @param data - Data object with bytes of data\n   * @returns If the encoded format is not supported, or subset is outside of the bounds of the decoded\n   *  image, nullptr is returned.\n   */\n  MakeImageFromEncoded: (encoded: SkData) => SkImage | null;\n\n  /**\n   * Return an Image backed by a given native buffer.\n   * The native buffer must be a valid owning reference.\n   *\n   * For instance, this API is used by\n   * [react-native-vision-camera](https://github.com/mrousavy/react-native-vision-camera)\n   * to render a Skia Camera preview.\n   *\n   * - On Android; This is an `AHardwareBuffer*`\n   * - On iOS, this is a `CVPixelBufferRef`\n   * @param nativeBuffer A strong `uintptr_t` pointer to the native buffer\n   * @throws Throws an error if the Image could not be created, for example when the given\n   * native buffer is invalid.\n   */\n  MakeImageFromNativeBuffer: (nativeBuffer: NativeBuffer) => SkImage;\n\n  /**\n   * Returns an image that will be a screenshot of the view represented by\n   * the view tag\n   * @param viewTag - The tag of the view to make an image from.\n   * @returns Returns a valid SkImage, if the view tag is invalid, nullptr is returned.\n   */\n  MakeImageFromViewTag: (viewTag: number) => Promise<SkImage | null>;\n\n  /**\n   * Returns an image with the given pixel data and format.\n   * Note that we will always make a copy of the pixel data, because of inconsistencies in\n   * behavior between GPU and CPU (i.e. the pixel data will be turned into a GPU texture and\n   * not modifiable after creation).\n   *\n   * @param info\n   * @param data - bytes representing the pixel data.\n   * @param bytesPerRow\n   */\n  MakeImage(info: ImageInfo, data: SkData, bytesPerRow: number): SkImage | null;\n}\n"],"mappings":";;;;;;IAMYA,SAAS,GAAAC,OAAA,CAAAD,SAAA,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA","ignoreList":[]}